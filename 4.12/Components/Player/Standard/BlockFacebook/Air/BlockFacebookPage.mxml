<?xml version="1.0" encoding="utf-8"?>
<ms:PlayerPage xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:ms="*"
	width="100%" height="100%"
	label="Facebook">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.XMLListCollection;
			
			private var m_dataBaseManager:DataBaseManager;
			
			protected override function createChildren():void
			{
				super.createChildren();
				m_dataBaseManager = m_framework.ServiceBroker.QueryService("DataBaseManager") as DataBaseManager;
				
				scenePickerCtrl.framework = m_framework;
				scenePickerCtrl.addEventListener(Event.CHANGE, onSceneChanged);
			}
			
			protected override function commitProperties():void
			{
				super.commitProperties();
				if (m_playerLoader==null || m_playerLoader.player==null)
					return;
				
				appId.text = BlockFacebookPlayer(m_playerLoader.player).appId;
				email.text = BlockFacebookPlayer(m_playerLoader.player).email;
				password.text = BlockFacebookPlayer(m_playerLoader.player).password;
				
				
				var hPlayerData:int = BlockFacebookPlayer(m_playerLoader.player).hPlayerData;
				
				scenePickerCtrl.hPlayerData = hPlayerData;
				if (hPlayerData==-1)
				{
					scenePickerCtrl.text = "[Drop facebook scene]";
				}
					
				intervalStepper.value = BlockFacebookPlayer(m_playerLoader.player).itemInterval;
				
				
				for each(var providerType:Object in ArrayList(providerTypeCombo.dataProvider).source)
				{
					if (BlockFacebookPlayer(m_playerLoader.player).providerType==providerType.name)
					{
						providerTypeCombo.selectedItem = providerType;
						break;
					}
				}
				
				if (BlockFacebookPlayer(m_playerLoader.player).providerType=="albums")
				{
					albumForm.visible = true;
					BlockFacebookPlayer(m_playerLoader.player).requestAlbums(onAlbums);
				}
				else
				{
					albumForm.visible = false;
				}
			}
			
			private function onAlbums(i_albums:ArrayCollection):void
			{
				if (m_playerLoader==null || m_playerLoader.player==null)
					return;
				
				if (albumCombo==null)
				{
					validateNow();
				}
				albumCombo.dataProvider = i_albums;
				if (i_albums.length>0)
				{
					for each(var album:Object in i_albums)
					{
						if (BlockFacebookPlayer(m_playerLoader.player).albumId==album.aid)
						{
							albumCombo.selectedItem = album;
							return;
						}
					}
					albumCombo.selectedIndex = 0;
					BlockFacebookPlayer(m_playerLoader.player).albumId==albumCombo.selectedItem.aid;
				}
			}
			
			private function onAlbumSelected():void
			{
				if (albumCombo.selectedItem==null)
					return;
				BlockFacebookPlayer(m_playerLoader.player).albumId = albumCombo.selectedItem.aid;
			}

     		private function onSceneChanged(event:Event):void
     		{
				BlockFacebookPlayer(m_playerLoader.player).hPlayerData = scenePickerCtrl.hPlayerData
     		}
     		
	        private function onIntervalStepper():void
	        {
				BlockFacebookPlayer(m_playerLoader.player).itemInterval = intervalStepper.value;
	        }
			
			
			private function onAppId():void
			{
				BlockFacebookPlayer(m_playerLoader.player).appId = appId.text;
			}
			
			private function onEmail():void
			{
				BlockFacebookPlayer(m_playerLoader.player).email = email.text;
			}
			
			private function onPassword():void
			{
				BlockFacebookPlayer(m_playerLoader.player).password = password.text;
			}
			
			private function onProviderType():void
			{
				switch(providerTypeCombo.selectedItem.name)
				{
					case "friends":
						BlockFacebookPlayer(m_playerLoader.player).providerType = "friends";
						albumForm.visible = false;
						break;
					
					case "albums":
						BlockFacebookPlayer(m_playerLoader.player).providerType = "albums";
						BlockFacebookPlayer(m_playerLoader.player).requestAlbums(onAlbums);
						albumForm.visible = true;
						break;
					
					case "events":
						BlockFacebookPlayer(m_playerLoader.player).providerType = "events";
						albumForm.visible = false;
						break;
				}
			}
			
			
		]]>
	</fx:Script>
	<ms:layout>
		<s:VerticalLayout/>
	</ms:layout>
	
	<s:Form  width="200">
		<s:FormItem label="AppID">
			<s:TextInput id="appId"
						 enter="onAppId()" focusOut="onAppId()"/>
		</s:FormItem>
		<s:FormItem label="Email">
			<s:TextInput id="email"
						 enter="onEmail()" focusOut="onEmail()"/>
		</s:FormItem>
		<s:FormItem label="Password">
			<s:TextInput id="password"  displayAsPassword="true" 
						 enter="onPassword()" focusOut="onPassword()"/>
		</s:FormItem>
		
		<s:FormItem label="Data type">
			<s:DropDownList id="providerTypeCombo" labelField="label" change="onProviderType()">
				<s:dataProvider>
					<s:ArrayList>
						<fx:Object name="friends" label="Friends"/>
						<fx:Object name="albums" label="Albums"/>
						<fx:Object name="events" label="Events"/>
					</s:ArrayList>
				</s:dataProvider>
			</s:DropDownList>
		</s:FormItem>
		
		
		<s:FormItem label="{resourceManager.getString('player', 'ScenePickerCtrl.scene')}"  width="100%">
			<ms:ScenePicker id="scenePickerCtrl" width="100%"/>
		</s:FormItem>
		<s:FormItem width="100%"
			label="{resourceManager.getString('player', 'catalog.interval')}">
			<ms:NumericStepperEx id="intervalStepper" minimum="2" maximum="999"
				change="onIntervalStepper()"/>
		</s:FormItem>
		
		
		<s:FormItem id="albumForm" label="Album">
			<s:DropDownList id="albumCombo" labelField="name" change="onAlbumSelected()"/>
		</s:FormItem>
		
	</s:Form>
</ms:PlayerPage>
