/*  Copyright (c) 2010, Adobe Systems Incorporated  All rights reserved.  Redistribution and use in source and binary forms, with or without  modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,    this list of conditions and the following disclaimer.  * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the    documentation and/or other materials provided with the distribution.  * Neither the name of Adobe Systems Incorporated nor the names of its    contributors may be used to endorse or promote products derived from    this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package com.facebook.graph {	import com.facebook.graph.core.AbstractFacebook;	import com.facebook.graph.data.Batch;	import com.facebook.graph.data.FQLMultiQuery;	import com.facebook.graph.data.FacebookSession;	import com.facebook.graph.net.FacebookRequest;	import com.facebook.graph.utils.FacebookDataUtils;	import com.facebook.graph.utils.IResultParser;		import flash.net.SharedObject;	import flash.net.URLRequestMethod;		import view.LoginWindow;
		/**	 * For use in AIR, to access the Facebook Graph API from the desktop.	 *	 */	public class FacebookWeb extends AbstractFacebook {		/**		 * @private		 *		 */		protected static const SO_NAME:String = 'com.facebook.graph.FacebookWeb';		/**		 * @private		 *		 */		protected static var _instance:FacebookWeb;		/**		 * @private		 *		 */		protected var _manageSession:Boolean = true;		/**		 * @private		 *		 */		protected var loginWindow:LoginWindow;		/**		 * @private		 *		 */		protected var applicationId:String;		/**		 * @private		 *		 */		protected var initCallback:Function;		/**		 * @private		 *		 */		protected var loginCallback:Function;		/**		 * @private		 *		 */		protected var logoutCallback:Function;		/**		 * Creates a new FacebookWeb instance		 *		 */		public function FacebookWeb() {			super();		}				/**		 * @private		 */		protected function init(applicationId:String, callback:Function = null, accessToken:String = null):void {			initCallback = callback;			this.applicationId = applicationId;			if (accessToken != null) {				session = new FacebookSession();				session.accessToken = accessToken;			} else if (_manageSession) {				session = new FacebookSession();				var so:SharedObject = SharedObject.getLocal(SO_NAME);				session.accessToken = so.data.accessToken;				session.expireDate = so.data.expireDate;			}			verifyAccessToken(); //make a call to load the user's data to verify current session, so it fires initCallback if applicable		}				/**		 * @private		 */		protected function verifyAccessToken():void {			api('/me', handleUserLoad);		}				/**		 * @private		 */		protected function handleUserLoad(result:Object, error:Object):void {			if(result) {				session.uid = result.id;				session.user = result;				if (loginCallback != null) {					loginCallback(session, null);				}				if (initCallback != null) {					initCallback(session, null);					initCallback = null;				}			} else {				if (loginCallback != null) {					loginCallback(null, error);				}				if (initCallback != null) {					initCallback(null, error);					initCallback = null;				}				session = null;			}		}				/**		 * @private		 */		protected function login(email:String, passwd:String, callback:Function, callback2:Function, ...extendedPermissions:Array):LoginWindow {			this.loginCallback = callback;			this.logoutCallback = null;						if (applicationId == null) {				throw new Error('FacebookWeb.init() needs to be called first.');			}						loginWindow = new LoginWindow();			loginWindow.open(applicationId, email, passwd, handleLogin, FacebookDataUtils.flattenArray(extendedPermissions) );						return loginWindow;		}				/**		 * @private		 */		protected function set manageSession(value:Boolean):void {			_manageSession = value;		}				/**		 * @private		 */		protected function requestExtendedPermissions(email:String, passwd:String, callback:Function, callback2:Function, ...extendedPermissions:Array):void {			if (applicationId == null) {				throw new Error('User must be logged in before asking for extended permissions.');			}			login(email, passwd, callback, callback2, extendedPermissions);		}				/**		 * @private		 */		protected function handleLogin(result:Object, fail:Object):void {			if(fail == "loaded" || fail == "login") {				if(loginCallback != null) {					this.loginCallback(null, fail);				}				return;			}			loginWindow._handleLogin = null;			if(fail) {				if (loginCallback != null) {		    		this.loginCallback(null, fail);				}				return;			}						session = new FacebookSession();			session.accessToken = result.access_token;			var expireDate:Date = new Date();			expireDate.time += Number(result.expires_in) * 1000;			session.expireDate = (result.expires_in == 0) ? null : expireDate;			session = session;						if (_manageSession) {				var so:SharedObject = SharedObject.getLocal(SO_NAME);				so.data.accessToken = session.accessToken;				so.data.expireDate = session.expireDate;				so.flush();			}						verifyAccessToken();		}				protected function handleLogout(result:Object, fail:Object):void {			//This is a specific case. Since we are hitting a different URL to logout, we do not get a normal result/fail			if( logoutCallback != null ) {				logoutCallback(true); 				logoutCallback = null;			}		}				/**		 * @private		 */		protected function logout(callback:Function=null, appOrigin:String=null):void {			logoutCallback = callback;						//clears cookie			var params:Object = {};			if (session != null) {				params.access_token = session.accessToken;			}			params.method = "auth.logout";			params.next = "http://static.ak.fbcdn.net/connect/xd_proxy.php#origin="+(appOrigin?appOrigin:"");			var req:FacebookRequest = new FacebookRequest();			openRequests[req] = handleLogout;			req.call("https://www.facebook.com/logout.php", 'GET', handleRequestLoad, params);						var so:SharedObject = SharedObject.getLocal(SO_NAME);			so.clear();			so.flush();						session = null;			loginCallback = null;			initCallback = null;		}				/**		 * @private		 */		protected function logoutTemporary(callback:Function=null, appOrigin:String=null):void {			this.logoutCallback = callback;						//clears cookie			var params:Object = {};			if (session != null) {				params.access_token = session.accessToken;			}			params.method = "auth.logout";			params.next = "http://static.ak.fbcdn.net/connect/xd_proxy.php#origin="+(appOrigin?appOrigin:"");			var req:FacebookRequest = new FacebookRequest();			openRequests[req] = handleLogout;			req.call("https://www.facebook.com/logout.php", 'GET', handleRequestLoad, params);						var so:SharedObject = SharedObject.getLocal(SO_NAME);			so.clear();			so.flush();						session = null;		}				/**		 * @private		 */	}}