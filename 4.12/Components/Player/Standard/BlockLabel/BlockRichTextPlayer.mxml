<?xml version="1.0" encoding="utf-8"?>
<ms:PlayerModule xmlns:fx="http://ns.adobe.com/mxml/2009" 
				 xmlns:s="library://ns.adobe.com/flex/spark" 
				 xmlns:mx="library://ns.adobe.com/flex/mx" 
				 xmlns:ms="*">
	
	<fx:Script>
		<![CDATA[
			import flashx.textLayout.container.ScrollPolicy;
			import flashx.textLayout.conversion.ConversionType;
			import flashx.textLayout.conversion.TextConverter;
			
			private var m_styleService:IStyleService;
			
			
			
			private var m_faces:Object = new Object();
			
			private var m_invalidateText:Boolean = false;
			
			protected var m_text:String = '<FONT FACE="Arial" SIZE="28" COLOR="#0B333C" LETTERSPACING="0" KERNING="0">RichText</FONT>';

			/************************************/
			/* implements IPlayer				*/
			/************************************/			
			public override function load(i_data:XML):void
			{
				super.load(i_data);
				if (XMLList(i_data.Text).length()>0)
				{
					m_text = XML(i_data.Text).toString();
				}
				
				invalidateText();
			}
			
			public override function get propertyPages():Array
			{
				return [BlockRichTextPage];
			}
			
			
			public override function save():XML
			{
				var xmlText:XML = <Text>{m_text}</Text>;
				return xmlText; 
			}   
			
			
			private function onTextChanged(event:Event):void
			{
				m_playerLoader.modified = true;
				m_text = TextConverter.export(richTxt.textFlow, TextConverter.TEXT_FIELD_HTML_FORMAT, ConversionType.STRING_TYPE) as String;
				invalidateText();
			}
			
			public function get fontFamilyList():Array
			{
				if (m_styleService==null)
					return null;
				return m_styleService.fontFamilyList;
			}

			public function set text(i_text:String):void
			{
				m_playerLoader.modified = true;
				m_text = i_text;
				invalidateText();
			}
			
			public function get text():String
			{
				return m_text;
			}
			
			 
			/************************************/
			/* Class Implementaion				*/
			/************************************/
			public override function initModule():void
			{
				super.initModule();
				m_styleService = m_framework.ServiceBroker.QueryService("StyleService") as IStyleService;

									
			}
			
			protected override function createChildren():void
			{
				super.createChildren();
				
			}
			
			
			protected override function commitProperties():void
			{
				super.commitProperties();
				if (m_invalidateText)
				{
					m_invalidateText = false;
					richTxt.textFlow = TextConverter.importToFlow(m_text, TextConverter.TEXT_FIELD_HTML_FORMAT);
				}
			}
			
			public function invalidateText():void
			{
				var pattern:RegExp = /FACE=\"[A-Za-z0-9\ \-]*\"/g;
				var matches:Array = m_text.match(pattern);
				
				for each(var match:String in matches)
				{
					var face:String = match.substring(6, match.length-1);
					m_styleService.loadFont(face);
					m_faces[face] = face;
				}
				
				if (m_styleService.fontsCompleted(m_faces))
				{
					m_invalidateText = true;
					invalidateProperties();
				}
				else
				{
					m_styleService.addEventListener(ServiceStyleEvent.COMPLETE, onStyleComplete);
				}
			}
			
			private function onStyleComplete(event:ServiceStyleEvent):void
			{
				if (m_styleService.fontsCompleted(m_faces))
				{
					m_styleService.removeEventListener(ServiceStyleEvent.COMPLETE, onStyleComplete);
					m_invalidateText = true;
					invalidateProperties();
					m_framework.EventBroker.dispatchEvent(new Event("event_fonts_loaded") );
				}
			}
			
			
			protected override function onDispose():void
			{
				super.onDispose();
				m_styleService.removeEventListener(ServiceStyleEvent.COMPLETE, onStyleComplete);
			}
		]]>
	</fx:Script>	
	
	<s:RichText id="richTxt" width="100%" height="100%" minHeight="0" minWidth="0"/>
</ms:PlayerModule>	
