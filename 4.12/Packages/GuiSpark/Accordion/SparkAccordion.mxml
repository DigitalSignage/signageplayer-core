<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  implements="ViewStack.ISelectableList"
		  gap="0"
		  width="400" height="300">
	<fx:Script>
		<![CDATA[
			import mx.core.IVisualElement;
			
			import spark.components.NavigatorContent;
			
			private var m_selectedIndex:int = -1;
			
			protected override function createChildren():void
			{
				super.createChildren();
				
				for(var i:int = 0; i<length; i++)
				{
					var navigatorContent:NavigatorContent = getItemAt(i) as NavigatorContent;
					if (navigatorContent!=null)
					{
						navigatorContent.setStyle("skinClass", AccordionItemSkin);
						if (i==0)
						{
							navigatorContent.percentHeight = 100;
							m_selectedIndex = 0;
						}
						else 
						{
							navigatorContent.height = 20;
						}
					}
				}		
				
				addEventListener("Item_selected", onItemSelected);
			}
			
			private function onItemSelected(event:Event):void
			{
				for(var i:int = 0; i<length; i++)
				{
					var item:NavigatorContent = getItemAt(i) as NavigatorContent;
					if  (item.skin == event.target)
					{
						item.skin.currentState = "open";
						item.percentHeight = 100;
						m_selectedIndex = i;
					}
					else
					{
						item.skin.currentState = "close";
						item.height = 20;
					}
				}
			}
			
			public function get selectedIndex():int
			{
				return m_selectedIndex;
			}
			
			public function set selectedIndex(i_selectedIndex:int):void
			{
				if (i_selectedIndex==m_selectedIndex)
					return;
				
				if (m_selectedIndex!=-1)
				{
					var oldItem:NavigatorContent = NavigatorContent(getItemAt(m_selectedIndex));
					oldItem.skin.currentState = "close";
					oldItem.height = 20;
				}
				var newItem:NavigatorContent = NavigatorContent(getItemAt(i_selectedIndex));
				newItem.skin.currentState = "open";
				newItem.percentHeight = 100;
				m_selectedIndex = i_selectedIndex;
			}
			
			
			// IList
			
			public function get length():int
			{
				return numElements;
			}
			
			public function addItem(item:Object):void
			{
				item.setStyle("skinClass", AccordionItemSkin);
				addElement(item as IVisualElement);
				if (numElements==1)
				{
					item.percentHeight = 100;
				}
				else 
				{
					item.height = 20;
				}
			}
			 
			public function addItemAt(item:Object, index:int):void
			{
				addElementAt(item as IVisualElement, index);
			}
			
			public function getItemAt(index:int, prefetch:int = 0):Object
			{
				return getElementAt(index);
			}
			
			public function getItemIndex(item:Object):int
			{
				return getElementIndex(item as IVisualElement);
			}
			
			public function itemUpdated(item:Object, property:Object = null, 
										oldValue:Object = null, 
										newValue:Object = null):void
			{
				
			}                         
			
			public function removeAll():void
			{
				removeAllElements();
			}
			
			public function removeItemAt(index:int):Object
			{
				return removeElementAt(index);
			}
			
			public function setItemAt(item:Object, index:int):Object
			{
				var result:Object = removeElementAt(index);
				addElementAt(item as IVisualElement,index);
				return result;
			}
			
			public function toArray():Array 
			{
				var result:Array = [];
				for (var i:int =0;i<numElements;i++)
				{
					result.push(getElementAt(i));
				}
				return result;
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
</s:VGroup>
